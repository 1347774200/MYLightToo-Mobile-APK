name: Build Android APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # 允许手动触发

jobs:
  build-apk:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: ☕ Set up JDK 8
      uses: actions/setup-java@v3
      with:
        java-version: '8'
        distribution: 'temurin'
        
    - name: 📦 Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: 📦 Cache Buildozer global directory
      uses: actions/cache@v4
      with:
        path: ~/.buildozer
        key: ${{ runner.os }}-buildozer-${{ hashFiles('**/buildozer.spec') }}
        restore-keys: |
          ${{ runner.os }}-buildozer-

    - name: 📦 Cache Buildozer directory
      uses: actions/cache@v4
      with:
        path: .buildozer
        key: ${{ runner.os }}-buildozer-local-${{ hashFiles('**/buildozer.spec') }}
        restore-keys: |
          ${{ runner.os }}-buildozer-local-
          
    - name: 🔧 Install system dependencies
      run: |
        sudo apt-get update

        # 安装基础依赖
        sudo apt-get install -y \
          python3-pip \
          build-essential \
          git \
          unzip \
          openjdk-8-jdk \
          autoconf \
          libtool \
          pkg-config \
          zlib1g-dev \
          libncurses5-dev \
          libncursesw5-dev \
          cmake \
          libffi-dev \
          libssl-dev

        # 尝试安装 libtinfo (兼容不同Ubuntu版本)
        sudo apt-get install -y libtinfo6 || sudo apt-get install -y libtinfo5 || echo "Warning: libtinfo not found, continuing..."
          
    - name: 🐍 Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install buildozer cython
        
    - name: 📁 Prepare project files
      run: |
        echo "📋 Repository contents:"
        ls -la

        echo "📋 查找所有可能的项目目录:"
        find . -maxdepth 2 -type d -name "*GMA*" -o -name "*mobile*" -o -name "*app*" | head -10

        echo "📋 查找包含buildozer.spec的目录:"
        find . -name "buildozer.spec" -type f

        # 项目文件在 "GMA2_UDP_Tool - 副本" 目录中
        PROJECT_DIR="GMA2_UDP_Tool - 副本"

        if [ -d "$PROJECT_DIR" ]; then
          echo "✅ Found project directory: $PROJECT_DIR"
          echo "📋 Project directory contents:"
          ls -la "$PROJECT_DIR/"

          # 创建构建目录并复制文件
          mkdir -p build_dir

          # 复制主要文件
          if [ -f "$PROJECT_DIR/main.py" ]; then
            cp "$PROJECT_DIR/main.py" build_dir/
            echo "✅ Copied main.py"
          else
            echo "❌ main.py not found in $PROJECT_DIR"
            exit 1
          fi

          # 复制所有Python文件
          cp "$PROJECT_DIR"/*.py build_dir/ 2>/dev/null || echo "⚠️ Some Python files may not exist"

          # 复制其他必要文件
          if [ -d "$PROJECT_DIR/Video" ]; then
            cp -r "$PROJECT_DIR/Video" build_dir/
            echo "✅ Copied Video directory"
          fi

          if [ -d "$PROJECT_DIR/music" ]; then
            cp -r "$PROJECT_DIR/music" build_dir/
            echo "✅ Copied music directory"
          fi

          if [ -f "$PROJECT_DIR/buildozer.spec" ]; then
            cp "$PROJECT_DIR/buildozer.spec" build_dir/
            echo "✅ Copied buildozer.spec"
          else
            echo "❌ buildozer.spec not found in $PROJECT_DIR"
            exit 1
          fi

        else
          echo "❌ Project directory not found: $PROJECT_DIR"
          echo "Available directories:"
          ls -la
          exit 1
        fi

        echo "📋 Build directory contents:"
        ls -la build_dir/
        
    - name: 🔨 Build APK with Buildozer
      working-directory: build_dir
      run: |
        echo "🚀 Starting APK build..."
        echo "Java version:"
        java -version
        echo "Python version:"
        python --version
        echo "Buildozer version:"
        buildozer --version
        
        # 设置环境变量
        export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
        export PATH=$JAVA_HOME/bin:$PATH
        
        # 构建APK
        buildozer android debug
        
    - name: 📱 List generated files
      working-directory: build_dir
      run: |
        echo "📁 Build directory contents:"
        find . -name "*.apk" -type f
        ls -la bin/ || echo "No bin directory found"
        
    - name: 📤 Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: multimedia-show-controller-apk
        path: build_dir/bin/*.apk
        retention-days: 30
        
    - name: 📊 Build summary
      run: |
        echo "🎉 APK Build Summary"
        echo "==================="
        if [ -f "build_dir/bin/*.apk" ]; then
          echo "✅ APK build successful!"
          echo "📱 APK files:"
          ls -la build_dir/bin/*.apk
          echo "📦 File size:"
          du -h build_dir/bin/*.apk
        else
          echo "❌ APK build failed!"
          exit 1
        fi
