name: APK Build - Manual Minimal Setup

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: '8'
        distribution: 'temurin'

    - name: Create minimal Android environment
      run: |
        # Create fake Android SDK structure to satisfy buildozer
        mkdir -p $HOME/android-sdk/platforms/android-30
        mkdir -p $HOME/android-sdk/build-tools/30.0.3
        mkdir -p $HOME/android-sdk/platform-tools

        # Create fake aidl executable
        echo '#!/bin/bash' > $HOME/android-sdk/build-tools/30.0.3/aidl
        echo 'echo "Fake AIDL for buildozer"' >> $HOME/android-sdk/build-tools/30.0.3/aidl
        chmod +x $HOME/android-sdk/build-tools/30.0.3/aidl

        # Set environment variables
        echo "ANDROID_HOME=$HOME/android-sdk" >> $GITHUB_ENV
        echo "ANDROID_SDK_ROOT=$HOME/android-sdk" >> $GITHUB_ENV
        echo "$HOME/android-sdk/build-tools/30.0.3" >> $GITHUB_PATH
        echo "$HOME/android-sdk/platform-tools" >> $GITHUB_PATH

        echo "Fake Android SDK created at $HOME/android-sdk"
        ls -la $HOME/android-sdk/build-tools/30.0.3/

    - name: Install Python packages only
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install python-for-android==2022.9.4 cython==0.29.36

        # Install minimal system dependencies
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          git \
          unzip \
          wget \
          curl \
          python3-dev

        # Verify installations
        echo "Installed packages:"
        pip list | grep -E "(python-for-android|cython)"
        echo "Cython version:"
        cython --version || echo "Cython not found in PATH"
        echo "P4A version:"
        p4a --version || echo "P4A not found in PATH"

    - name: Create simple app
      run: |
        mkdir -p app_build
        cd app_build

        # Create extremely simple main.py
        echo 'print("Hello from Python on Android!")' > main.py
        echo 'import time' >> main.py
        echo 'time.sleep(1)' >> main.py
        echo 'print("App completed successfully!")' >> main.py

        echo "Created main.py:"
        cat main.py

    - name: Build APK with P4A directly
      working-directory: app_build
      run: |
        echo "Building APK with P4A..."
        echo "Environment check:"
        java -version
        python --version
        p4a --version || echo "P4A not found"

        # Check fake AIDL
        echo "Checking fake AIDL:"
        which aidl || echo "AIDL not in PATH"
        aidl || echo "AIDL execution test"

        # Set environment variables for P4A
        export ANDROIDAPI="30"
        export NDKAPI="21"

        # Build APK using P4A with service_only bootstrap (simplest)
        p4a apk --private . --package=com.test.app --name="TestApp" --version=1.0 --bootstrap=service_only --requirements=python3 --arch=armeabi-v7a || {
          echo "Service_only failed, trying webview..."
          p4a apk --private . --package=com.test.app --name="TestApp" --version=1.0 --bootstrap=webview --requirements=python3 --arch=armeabi-v7a
        }

    - name: Check results
      working-directory: app_build
      run: |
        echo "Searching for APK files:"
        find . -name "*.apk" -type f -exec ls -lh {} \; || echo "No APK found"

        # P4A creates APK in dist directory
        if [ -d "dist" ]; then
          echo "Dist directory contents:"
          ls -la dist/
        fi

    - name: Upload APK
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-apk
        path: app_build/dist/*.apk
        retention-days: 30

    - name: Summary
      run: |
        cd app_build
        if find . -name "*.apk" -type f | grep -q .; then
          echo "üéâ SUCCESS: APK build completed!"
          find . -name "*.apk" -type f -exec basename {} \;
          echo "üì± Download APK from Artifacts section above"
        else
          echo "‚ùå FAILED: No APK generated"
          echo "Build logs and directory structure:"
          ls -la
          echo "Checking for any build artifacts:"
          find . -type f -name "*" | head -20
        fi
