name: Ultra Simple APK Build

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential git unzip wget curl autoconf libtool pkg-config zlib1g-dev libncurses5-dev libncursesw5-dev cmake libffi-dev libssl-dev python3-setuptools python3-distutils ant openjdk-8-jdk-headless

    - name: Install Python packages
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install buildozer==1.5.0 cython==0.29.36

    - name: Setup Android SDK with AIDL
      run: |
        # Create Android SDK directory
        mkdir -p $HOME/android-sdk/cmdline-tools
        cd $HOME/android-sdk/cmdline-tools

        # Download and install command line tools
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
        unzip -q commandlinetools-linux-9477386_latest.zip
        mv cmdline-tools latest

        # Set environment variables
        export ANDROID_HOME=$HOME/android-sdk
        export ANDROID_SDK_ROOT=$HOME/android-sdk
        export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/build-tools/30.0.3

        # Add to GitHub environment
        echo "ANDROID_HOME=$HOME/android-sdk" >> $GITHUB_ENV
        echo "ANDROID_SDK_ROOT=$HOME/android-sdk" >> $GITHUB_ENV
        echo "$HOME/android-sdk/cmdline-tools/latest/bin" >> $GITHUB_PATH
        echo "$HOME/android-sdk/platform-tools" >> $GITHUB_PATH
        echo "$HOME/android-sdk/build-tools/30.0.3" >> $GITHUB_PATH

        # Accept licenses
        yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses || true

        # Install SDK components including build-tools that contain AIDL
        echo "Installing Android SDK components..."
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "platform-tools"
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "platforms;android-30"
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "build-tools;30.0.3"
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "ndk;21.4.7075529"

        # Wait for installation to complete
        sleep 5

        # Verify AIDL installation
        echo "Verifying AIDL installation..."
        echo "Build tools directory:"
        ls -la $ANDROID_HOME/build-tools/ || echo "Build tools directory not found"
        echo "Build tools 30.0.3 contents:"
        ls -la $ANDROID_HOME/build-tools/30.0.3/ || echo "Build tools 30.0.3 not found"

        # Check for AIDL file
        if [ -f "$ANDROID_HOME/build-tools/30.0.3/aidl" ]; then
          chmod +x $ANDROID_HOME/build-tools/30.0.3/aidl
          echo "AIDL found and made executable"

          # Create symlink in a directory that's in PATH
          sudo ln -sf $ANDROID_HOME/build-tools/30.0.3/aidl /usr/local/bin/aidl
          echo "AIDL symlink created in /usr/local/bin/"
        else
          echo "ERROR: AIDL not found after installation"
          echo "Trying alternative build-tools versions..."
          find $ANDROID_HOME -name "aidl" -type f 2>/dev/null || echo "No AIDL found anywhere"
        fi

        # Final AIDL verification
        echo "Final AIDL check:"
        which aidl || echo "AIDL not in PATH"
        aidl --help 2>/dev/null || echo "AIDL not executable"

    - name: Setup Apache Ant
      run: |
        # Create buildozer directory and download Ant to avoid network issues during build
        mkdir -p $HOME/.buildozer/android/platform
        cd $HOME/.buildozer/android/platform

        # Download Apache Ant
        echo "Downloading Apache Ant..."
        wget -q https://archive.apache.org/dist/ant/binaries/apache-ant-1.9.4-bin.tar.gz
        tar -xzf apache-ant-1.9.4-bin.tar.gz

        # Verify extraction
        echo "Apache Ant downloaded and extracted"
        ls -la $HOME/.buildozer/android/platform/
        ls -la $HOME/.buildozer/android/platform/apache-ant-1.9.4/ || echo "Ant directory not found"

    - name: Create app
      run: |
        mkdir -p app_build
        cd app_build

        # Create main.py
        echo "from kivy.app import App" > main.py
        echo "from kivy.uix.label import Label" >> main.py
        echo "" >> main.py
        echo "class TestApp(App):" >> main.py
        echo "    def build(self):" >> main.py
        echo "        return Label(text='APK Build Test', font_size='20sp')" >> main.py
        echo "" >> main.py
        echo "TestApp().run()" >> main.py

        # Create buildozer.spec
        echo "[app]" > buildozer.spec
        echo "title = Test App" >> buildozer.spec
        echo "package.name = testapp" >> buildozer.spec
        echo "package.domain = com.test.app" >> buildozer.spec
        echo "source.dir = ." >> buildozer.spec
        echo "source.include_exts = py" >> buildozer.spec
        echo "version = 1.0" >> buildozer.spec
        echo "requirements = python3,kivy" >> buildozer.spec
        echo "orientation = portrait" >> buildozer.spec
        echo "" >> buildozer.spec
        echo "[buildozer]" >> buildozer.spec
        echo "log_level = 2" >> buildozer.spec
        echo "" >> buildozer.spec
        echo "android.permissions = INTERNET" >> buildozer.spec
        echo "android.api = 30" >> buildozer.spec
        echo "android.minapi = 21" >> buildozer.spec
        echo "android.sdk = 30" >> buildozer.spec
        echo "android.ndk = 21.4.7075529" >> buildozer.spec
        echo "android.ndk_api = 21" >> buildozer.spec
        echo "android.accept_sdk_license = True" >> buildozer.spec
        echo "android.archs = armeabi-v7a" >> buildozer.spec
        echo "android.skip_update = False" >> buildozer.spec
        echo "android.ant_path = /usr/bin/ant" >> buildozer.spec
        echo "Files created successfully"
        ls -la
        echo "main.py:"
        cat main.py
        echo "buildozer.spec:"
        cat buildozer.spec

    - name: Build APK
      working-directory: app_build
      run: |
        # Set environment variables with correct build-tools version
        export ANDROID_HOME=$HOME/android-sdk
        export ANDROID_SDK_ROOT=$HOME/android-sdk
        export ANDROID_NDK_HOME=$HOME/android-sdk/ndk/21.4.7075529
        export PATH=$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/build-tools/30.0.3:$PATH

        # Set additional environment variables to avoid downloads
        export ANDROIDAPI="30"
        export NDKAPI="21"
        export ANDROID_NDK_VERSION="21.4.7075529"
        export ANT_HOME="/usr/share/ant"

        echo "Starting build process..."
        echo "Environment check:"
        echo "Java version:"
        java -version
        echo "Python version:"
        python --version
        echo "Buildozer version:"
        buildozer --version

        echo "Android SDK structure:"
        ls -la $ANDROID_HOME/
        echo "Build tools:"
        ls -la $ANDROID_HOME/build-tools/

        echo "AIDL verification:"
        which aidl || echo "AIDL not in PATH"
        ls -la $ANDROID_HOME/build-tools/30.0.3/aidl || echo "AIDL file not found"

        # Try to find AIDL anywhere in Android SDK
        echo "Searching for AIDL in Android SDK:"
        find $ANDROID_HOME -name "aidl" -type f 2>/dev/null || echo "No AIDL found in Android SDK"

        # If AIDL not in PATH, try to add it manually
        if ! which aidl >/dev/null 2>&1; then
          echo "AIDL not in PATH, trying to fix..."
          if [ -f "$ANDROID_HOME/build-tools/30.0.3/aidl" ]; then
            export PATH=$ANDROID_HOME/build-tools/30.0.3:$PATH
            echo "Added build-tools to PATH"
          fi
        fi

        echo "PATH contains:"
        echo $PATH | tr ':' '\n' | grep android || echo "No android paths found"

        # Final AIDL test
        echo "Final AIDL test:"
        aidl --help 2>/dev/null && echo "AIDL is working" || echo "AIDL still not working"

        # Clean and build
        rm -rf .buildozer bin
        echo "Starting buildozer..."
        buildozer android debug

    - name: Check results
      working-directory: app_build
      run: |
        echo "Searching for APK files:"
        find . -name "*.apk" -type f -exec ls -lh {} \; || echo "No APK found"
        if [ -d "bin" ]; then
          echo "Bin directory:"
          ls -la bin/
        fi

    - name: Upload APK
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-apk
        path: app_build/bin/*.apk
        retention-days: 30

    - name: Summary
      run: |
        cd app_build
        if find . -name "*.apk" -type f | grep -q .; then
          echo "SUCCESS: APK build completed"
          find . -name "*.apk" -type f -exec basename {} \;
          echo "Download from Artifacts section"
        else
          echo "FAILED: No APK generated"
          exit 1
        fi
