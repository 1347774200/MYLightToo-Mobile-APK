name: Working APK Build

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        java-version: '8'
        distribution: 'temurin'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          git \
          unzip \
          wget \
          curl \
          autoconf \
          libtool \
          pkg-config \
          zlib1g-dev \
          libncurses5-dev \
          libncursesw5-dev \
          cmake \
          libffi-dev \
          libssl-dev \
          python3-setuptools \
          python3-distutils \
          ant \
          openjdk-8-jdk \
          aidl

    - name: Install Python packages
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install buildozer==1.4.0 cython==0.29.33

    - name: Setup Android SDK (Simplified)
      run: |
        # Use pre-installed Android SDK from GitHub Actions
        export ANDROID_HOME=/usr/local/lib/android/sdk
        export ANDROID_SDK_ROOT=/usr/local/lib/android/sdk
        export ANDROID_NDK_HOME=/usr/local/lib/android/sdk/ndk-bundle

        # Add to GitHub environment
        echo "ANDROID_HOME=/usr/local/lib/android/sdk" >> $GITHUB_ENV
        echo "ANDROID_SDK_ROOT=/usr/local/lib/android/sdk" >> $GITHUB_ENV
        echo "ANDROID_NDK_HOME=/usr/local/lib/android/sdk/ndk-bundle" >> $GITHUB_ENV

        # Add tools to PATH
        echo "/usr/local/lib/android/sdk/platform-tools" >> $GITHUB_PATH
        echo "/usr/local/lib/android/sdk/build-tools/30.0.3" >> $GITHUB_PATH

        # Verify installation
        ls -la /usr/local/lib/android/sdk/ || echo "SDK not found, will install manually"

        # Install SDK if not present
        if [ ! -d "/usr/local/lib/android/sdk" ]; then
          echo "Installing Android SDK manually..."
          sudo mkdir -p /usr/local/lib/android/sdk
          cd /tmp
          wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
          unzip -q commandlinetools-linux-9477386_latest.zip
          sudo mv cmdline-tools /usr/local/lib/android/sdk/
          sudo mkdir -p /usr/local/lib/android/sdk/cmdline-tools/latest
          sudo mv /usr/local/lib/android/sdk/cmdline-tools/* /usr/local/lib/android/sdk/cmdline-tools/latest/ 2>/dev/null || true

          # Accept licenses and install components
          yes | sudo /usr/local/lib/android/sdk/cmdline-tools/latest/bin/sdkmanager --licenses || true
          sudo /usr/local/lib/android/sdk/cmdline-tools/latest/bin/sdkmanager "platform-tools"
          sudo /usr/local/lib/android/sdk/cmdline-tools/latest/bin/sdkmanager "platforms;android-28"
          sudo /usr/local/lib/android/sdk/cmdline-tools/latest/bin/sdkmanager "build-tools;28.0.3"
        fi

    - name: Create simple app
      run: |
        mkdir -p app_build
        cd app_build

        # Create extremely simple main.py
        cat > main.py << 'EOF'
        print("Hello from Python on Android!")
        import time
        time.sleep(1)
        print("App completed successfully!")
        EOF

        # Create minimal buildozer.spec
        cat > buildozer.spec << 'EOF'
        [app]
        title = TestApp
        package.name = testapp
        package.domain = com.test.app
        source.dir = .
        source.include_exts = py
        version = 1.0
        requirements = python3
        orientation = portrait

        [buildozer]
        log_level = 2

        [app:android]
        android.permissions = INTERNET
        android.api = 28
        android.minapi = 21
        android.ndk = 21b
        android.ndk_api = 21
        android.accept_sdk_license = True
        android.archs = armeabi-v7a
        android.skip_update = False
        EOF

        echo "Created files:"
        ls -la
        echo "main.py:"
        cat main.py

    - name: Build APK with Buildozer
      working-directory: app_build
      run: |
        echo "Building APK with Buildozer..."
        echo "Environment check:"
        java -version
        python --version
        buildozer --version
        which aidl || echo "aidl not found"

        # Build APK using buildozer
        buildozer android debug

    - name: Check results
      working-directory: app_build
      run: |
        echo "Searching for APK files:"
        find . -name "*.apk" -type f -exec ls -lh {} \; || echo "No APK found"

        # Buildozer creates APK in bin directory
        if [ -d "bin" ]; then
          echo "Bin directory contents:"
          ls -la bin/
        fi

    - name: Upload APK
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-apk
        path: app_build/bin/*.apk
        retention-days: 30

    - name: Summary
      run: |
        cd app_build
        if find . -name "*.apk" -type f | grep -q .; then
          echo "✅ SUCCESS: APK build completed!"
          find . -name "*.apk" -type f -exec basename {} \;
          echo "📱 Download APK from Artifacts section above"
        else
          echo "❌ FAILED: No APK generated"
          exit 1
        fi
