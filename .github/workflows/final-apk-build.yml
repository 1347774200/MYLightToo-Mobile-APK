name: Final APK Build

on:
  workflow_dispatch:
    inputs:
      debug:
        description: 'Enable debug mode'
        required: false
        default: 'true'

jobs:
  build:
    runs-on: ubuntu-22.04
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python 3.8
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'
        
    - name: ☕ Setup Java 8
      uses: actions/setup-java@v4
      with:
        java-version: '8'
        distribution: 'temurin'
        
    - name: 🔧 Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          git \
          unzip \
          openjdk-8-jdk \
          autoconf \
          libtool \
          pkg-config \
          zlib1g-dev \
          libncurses5-dev \
          libncursesw5-dev \
          cmake \
          libffi-dev \
          libssl-dev \
          python3-distutils \
          python3-setuptools
          
    - name: 🐍 Install Python dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install buildozer==1.5.0 cython==0.29.36
        
    - name: 📱 Create test application
      run: |
        mkdir -p multimedia_app
        cd multimedia_app
        
        cat > main.py << 'EOF'
        from kivy.app import App
        from kivy.uix.boxlayout import BoxLayout
        from kivy.uix.label import Label
        from kivy.uix.button import Button

        class MultimediaControllerApp(App):
            def build(self):
                main_layout = BoxLayout(orientation='vertical', padding=20, spacing=15)
                
                title_label = Label(
                    text='文旅多媒体演出控制系统\n移动端控制器',
                    font_size='18sp',
                    size_hint_y=0.3
                )
                
                test_btn = Button(
                    text='系统测试',
                    size_hint_y=0.2
                )
                test_btn.bind(on_press=self.on_test_press)
                
                self.status_label = Label(
                    text='系统就绪，等待操作指令',
                    font_size='14sp',
                    size_hint_y=0.5
                )
                
                main_layout.add_widget(title_label)
                main_layout.add_widget(test_btn)
                main_layout.add_widget(self.status_label)
                
                return main_layout
            
            def on_test_press(self, instance):
                self.status_label.text = 'APK构建成功！\n文旅多媒体演出控制系统\n移动端测试完成'

        if __name__ == '__main__':
            MultimediaControllerApp().run()
        EOF

        cat > buildozer.spec << 'EOF'
        [app]
        title = 文旅多媒体演出控制
        package.name = multimediacontroller
        package.domain = com.showcontrol.mobile
        source.dir = .
        source.include_exts = py
        version = 1.0
        requirements = python3,kivy
        orientation = portrait
        fullscreen = 0

        [buildozer]
        log_level = 2

        android.permissions = INTERNET
        android.api = 30
        android.minapi = 21
        android.sdk = 30
        android.ndk = 25b
        android.ndk_api = 21
        android.accept_sdk_license = True
        android.archs = armeabi-v7a
        android.allow_backup = True
        android.private_storage = True
        EOF

        echo "✅ Application files created successfully"
        ls -la
        
    - name: 🔨 Build APK
      working-directory: multimedia_app
      run: |
        echo "🚀 Starting APK build process..."
        
        export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
        export PATH=$JAVA_HOME/bin:$PATH
        
        echo "📋 Environment Information:"
        java -version 2>&1 | head -3
        python --version
        buildozer --version
        
        echo "🧹 Cleaning previous builds..."
        rm -rf .buildozer bin
        
        echo "🔨 Building APK..."
        buildozer android debug
        
    - name: 📋 Check build results
      working-directory: multimedia_app
      run: |
        echo "📁 Build directory contents:"
        ls -la
        
        echo "🔍 Searching for APK files:"
        find . -name "*.apk" -type f -exec ls -lh {} \; || echo "No APK files found yet"
        
        if [ -d "bin" ]; then
          echo "📦 Bin directory contents:"
          ls -la bin/
        fi
        
    - name: 📤 Upload APK
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: multimedia-controller-apk
        path: |
          multimedia_app/bin/*.apk
        retention-days: 30
        
    - name: 📊 Build Summary
      run: |
        echo "🎉 Build Process Completed!"
        echo "================================"
        
        cd multimedia_app
        APK_FILES=$(find . -name "*.apk" -type f)
        
        if [ -n "$APK_FILES" ]; then
          echo "✅ APK files generated successfully:"
          echo "$APK_FILES" | while read apk; do
            echo "📱 $(basename "$apk") - $(du -h "$apk" | cut -f1)"
          done
          echo ""
          echo "📥 Download APK from 'Artifacts' section above"
          echo "📲 Install on Android device to test"
        else
          echo "❌ No APK files were generated"
          echo "📋 Please check the build logs for errors"
        fi
