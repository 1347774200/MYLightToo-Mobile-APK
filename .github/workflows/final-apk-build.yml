name: Ultra Simple APK Build

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential git unzip wget curl autoconf libtool pkg-config zlib1g-dev libncurses5-dev libncursesw5-dev cmake libffi-dev libssl-dev python3-setuptools python3-distutils ant openjdk-8-jdk-headless

    - name: Install Python packages
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install python-for-android==2024.1.21 cython==0.29.36

    - name: Setup Android SDK for P4A
      run: |
        # Create Android SDK directory
        mkdir -p $HOME/android-sdk
        export ANDROID_HOME=$HOME/android-sdk
        export ANDROID_SDK_ROOT=$HOME/android-sdk

        # Add to GitHub environment
        echo "ANDROID_HOME=$HOME/android-sdk" >> $GITHUB_ENV
        echo "ANDROID_SDK_ROOT=$HOME/android-sdk" >> $GITHUB_ENV

        # Download and install command line tools
        cd $HOME/android-sdk
        mkdir -p cmdline-tools
        cd cmdline-tools
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
        unzip -q commandlinetools-linux-9477386_latest.zip
        mv cmdline-tools latest

        # Add cmdline-tools to PATH
        echo "$HOME/android-sdk/cmdline-tools/latest/bin" >> $GITHUB_PATH
        export PATH=$PATH:$HOME/android-sdk/cmdline-tools/latest/bin

        # Accept licenses
        yes | $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager --licenses || true

        # Install required SDK components
        echo "Installing SDK components..."
        $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager "platform-tools"
        $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager "platforms;android-30"
        $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager "build-tools;30.0.3"

        # Add platform-tools to PATH
        echo "$HOME/android-sdk/platform-tools" >> $GITHUB_PATH
        echo "$HOME/android-sdk/build-tools/30.0.3" >> $GITHUB_PATH

        # Download NDK 25b for P4A
        echo "Downloading Android NDK 25b..."
        cd $HOME/android-sdk
        wget -q https://dl.google.com/android/repository/android-ndk-r25b-linux.zip
        unzip -q android-ndk-r25b-linux.zip

        # Create ndk directory and move NDK
        mkdir -p ndk
        mv android-ndk-r25b ndk/25.2.9519653

        # Set NDK environment
        echo "ANDROID_NDK_HOME=$HOME/android-sdk/ndk/25.2.9519653" >> $GITHUB_ENV

        # Verify SDK structure
        echo "SDK verification:"
        ls -la $HOME/android-sdk/
        echo "Command line tools:"
        ls -la $HOME/android-sdk/cmdline-tools/latest/bin/ | head -10
        echo "Platform tools:"
        ls -la $HOME/android-sdk/platform-tools/ | head -5
        echo "Build tools:"
        ls -la $HOME/android-sdk/build-tools/30.0.3/ | head -10

    - name: Verify tools
      run: |
        echo "Verifying installed tools..."
        echo "Java version:"
        java -version
        echo "Ant version:"
        ant -version
        echo "Android SDK tools:"
        which sdkmanager || echo "sdkmanager not found"
        which adb || echo "adb not found"
        echo "P4A version:"
        p4a --version

    - name: Create app
      run: |
        mkdir -p app_build
        cd app_build

        # Create main.py
        echo "from kivy.app import App" > main.py
        echo "from kivy.uix.label import Label" >> main.py
        echo "" >> main.py
        echo "class TestApp(App):" >> main.py
        echo "    def build(self):" >> main.py
        echo "        return Label(text='APK Build Test', font_size='20sp')" >> main.py
        echo "" >> main.py
        echo "TestApp().run()" >> main.py

        # Create buildozer.spec
        echo "[app]" > buildozer.spec
        echo "title = Test App" >> buildozer.spec
        echo "package.name = testapp" >> buildozer.spec
        echo "package.domain = com.test.app" >> buildozer.spec
        echo "source.dir = ." >> buildozer.spec
        echo "source.include_exts = py" >> buildozer.spec
        echo "version = 1.0" >> buildozer.spec
        echo "requirements = python3,kivy" >> buildozer.spec
        echo "orientation = portrait" >> buildozer.spec
        echo "" >> buildozer.spec
        echo "[buildozer]" >> buildozer.spec
        echo "log_level = 2" >> buildozer.spec
        echo "" >> buildozer.spec
        echo "android.permissions = INTERNET" >> buildozer.spec
        echo "android.api = 30" >> buildozer.spec
        echo "android.minapi = 21" >> buildozer.spec
        echo "android.sdk = 30" >> buildozer.spec
        echo "android.ndk = 21.4.7075529" >> buildozer.spec
        echo "android.ndk_api = 21" >> buildozer.spec
        echo "android.accept_sdk_license = True" >> buildozer.spec
        echo "android.archs = armeabi-v7a" >> buildozer.spec
        echo "android.skip_update = False" >> buildozer.spec
        echo "android.ant_path = /usr/bin/ant" >> buildozer.spec
        echo "Files created successfully"
        ls -la
        echo "main.py:"
        cat main.py
        echo "buildozer.spec:"
        cat buildozer.spec

    - name: Build APK with P4A
      working-directory: app_build
      run: |
        # Set environment variables for P4A
        export ANDROID_HOME=$HOME/android-sdk
        export ANDROID_SDK_ROOT=$HOME/android-sdk
        export ANDROID_NDK_HOME=$HOME/android-sdk/ndk/25.2.9519653
        export PATH=$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/build-tools/30.0.3:$PATH

        # Set P4A specific environment variables
        export ANDROIDAPI="30"
        export NDKAPI="21"
        export P4A_BOOTSTRAP="sdl2"

        echo "Starting P4A build process..."
        echo "Environment check:"
        echo "Java version:"
        java -version
        echo "Python version:"
        python --version
        echo "P4A version:"
        p4a --version

        echo "Android SDK structure:"
        ls -la $ANDROID_HOME/

        # Create simple Android main file directly
        cat > simple_main.py << 'EOF'
#!/usr/bin/env python3
# Simple Python service for Android APK
import time
import os
import sys

def main():
    print("Python service started on Android!")
    print(f"Python version: {sys.version}")
    print(f"Platform: {sys.platform}")

    # Create a simple log file
    log_path = "/sdcard/python_service.log"
    try:
        with open(log_path, "w") as f:
            f.write("Python service is running!\n")
            f.write(f"Time: {time.ctime()}\n")
            f.write(f"Python version: {sys.version}\n")
        print(f"Log written to {log_path}")
    except Exception as e:
        print(f"Could not write log: {e}")

    # Keep service running for a short time
    for i in range(5):
        print(f"Service tick {i+1}")
        time.sleep(2)

    print("Service completed successfully!")

if __name__ == "__main__":
    main()
EOF

        # Use the simple main file
        cp simple_main.py main.py

        # Try building with empty bootstrap first (simplest)
        echo "Building APK with empty bootstrap..."
        p4a apk --private . --package=com.test.app --name="TestApp" --version=1.0 --bootstrap=empty --requirements=python3 --arch=armeabi-v7a --permission INTERNET --ignore-setup-py || {
          echo "Empty bootstrap failed, trying service_only..."
          p4a apk --private . --package=com.test.app --name="TestApp" --version=1.0 --bootstrap=service_only --requirements=python3 --arch=armeabi-v7a --permission INTERNET --ignore-setup-py
        }

    - name: Check results
      working-directory: app_build
      run: |
        echo "Searching for APK files:"
        find . -name "*.apk" -type f -exec ls -lh {} \; || echo "No APK found"

        # P4A creates APK in dist directory
        if [ -d "dist" ]; then
          echo "Dist directory:"
          ls -la dist/
        fi

        if [ -d "bin" ]; then
          echo "Bin directory:"
          ls -la bin/
        fi

    - name: Upload APK
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-apk
        path: |
          app_build/dist/*.apk
          app_build/bin/*.apk
        retention-days: 30

    - name: Summary
      run: |
        cd app_build
        if find . -name "*.apk" -type f | grep -q .; then
          echo "SUCCESS: APK build completed"
          find . -name "*.apk" -type f -exec basename {} \;
          echo "Download from Artifacts section"
        else
          echo "FAILED: No APK generated"
          exit 1
        fi
