name: Ultra Simple APK Build

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential git unzip wget curl autoconf libtool pkg-config zlib1g-dev libncurses5-dev libncursesw5-dev cmake libffi-dev libssl-dev python3-setuptools python3-distutils ant

    - name: Install Python packages
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install python-for-android==2023.9.16 cython==0.29.36

    - name: Setup Android SDK
      run: |
        # Create Android SDK directory
        mkdir -p $HOME/android-sdk
        export ANDROID_HOME=$HOME/android-sdk
        export ANDROID_SDK_ROOT=$HOME/android-sdk

        # Add to GitHub environment
        echo "ANDROID_HOME=$HOME/android-sdk" >> $GITHUB_ENV
        echo "ANDROID_SDK_ROOT=$HOME/android-sdk" >> $GITHUB_ENV

        # Download and install command line tools
        cd $HOME/android-sdk
        mkdir -p cmdline-tools
        cd cmdline-tools
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
        unzip -q commandlinetools-linux-9477386_latest.zip
        mv cmdline-tools latest

        # Add cmdline-tools to PATH
        echo "$HOME/android-sdk/cmdline-tools/latest/bin" >> $GITHUB_PATH
        export PATH=$PATH:$HOME/android-sdk/cmdline-tools/latest/bin

        # Accept licenses
        yes | $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager --licenses || true

        # Install required SDK components including API 33
        $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager "platform-tools"
        $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager "platforms;android-30"
        $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager "platforms;android-33"
        $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager "build-tools;30.0.3"
        $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager "build-tools;33.0.2"

        # Add platform-tools to PATH
        echo "$HOME/android-sdk/platform-tools" >> $GITHUB_PATH
        echo "$HOME/android-sdk/build-tools/33.0.2" >> $GITHUB_PATH

        # Download NDK 25b for better compatibility
        echo "Downloading Android NDK 25b..."
        cd $HOME/android-sdk
        wget -q https://dl.google.com/android/repository/android-ndk-r25b-linux.zip
        unzip -q android-ndk-r25b-linux.zip

        # Create ndk directory and move NDK
        mkdir -p ndk
        mv android-ndk-r25b ndk/25.2.9519653

        # Set NDK environment
        echo "ANDROID_NDK_HOME=$HOME/android-sdk/ndk/25.2.9519653" >> $GITHUB_ENV

    - name: Create simple app
      run: |
        mkdir -p app_build
        cd app_build

        # Create extremely simple main.py
        echo 'print("Hello from Python on Android!")' > main.py
        echo 'import time' >> main.py
        echo 'time.sleep(1)' >> main.py
        echo 'print("App completed successfully!")' >> main.py

        echo "Created main.py:"
        cat main.py

    - name: Build APK with P4A
      working-directory: app_build
      run: |
        # Set environment variables
        export ANDROID_HOME=$HOME/android-sdk
        export ANDROID_SDK_ROOT=$HOME/android-sdk
        export ANDROID_NDK_HOME=$HOME/android-sdk/ndk/25.2.9519653
        export PATH=$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/build-tools/33.0.2:$PATH

        echo "Building APK with P4A..."
        echo "Environment check:"
        java -version
        python --version
        p4a --version

        # Set P4A API versions explicitly
        export ANDROIDAPI="33"
        export NDKAPI="21"

        # Build APK with explicit API versions
        p4a apk --private . --package=com.test.app --name="TestApp" --version=1.0 --bootstrap=service_only --requirements=python3 --arch=armeabi-v7a --api=33 --ndk-api=21

    - name: Check results
      working-directory: app_build
      run: |
        echo "Searching for APK files:"
        find . -name "*.apk" -type f -exec ls -lh {} \; || echo "No APK found"

        # P4A creates APK in dist directory
        if [ -d "dist" ]; then
          echo "Dist directory contents:"
          ls -la dist/
        fi

    - name: Upload APK
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-apk
        path: app_build/dist/*.apk
        retention-days: 30

    - name: Summary
      run: |
        cd app_build
        if find . -name "*.apk" -type f | grep -q .; then
          echo "‚úÖ SUCCESS: APK build completed!"
          find . -name "*.apk" -type f -exec basename {} \;
          echo "üì± Download APK from Artifacts section above"
        else
          echo "‚ùå FAILED: No APK generated"
          exit 1
        fi
