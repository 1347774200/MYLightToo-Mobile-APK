name: Final APK Build

on:
  workflow_dispatch:
    inputs:
      debug:
        description: 'Enable debug mode'
        required: false
        default: 'true'

jobs:
  build:
    runs-on: ubuntu-20.04
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v3
      
    - name: 🐍 Setup Python 3.8
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'
        
    - name: ☕ Setup Java 8
      uses: actions/setup-java@v3
      with:
        java-version: '8'
        distribution: 'temurin'
        
    - name: 📦 Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.buildozer
        key: ${{ runner.os }}-buildozer-${{ hashFiles('**/buildozer.spec') }}
        restore-keys: |
          ${{ runner.os }}-buildozer-
          
    - name: 🔧 Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          git \
          unzip \
          openjdk-8-jdk \
          autoconf \
          libtool \
          pkg-config \
          zlib1g-dev \
          libncurses5-dev \
          libncursesw5-dev \
          cmake \
          libffi-dev \
          libssl-dev \
          python3-distutils
          
    - name: 🐍 Install Python dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install buildozer==1.4.0 cython==0.29.33
        
    - name: 📱 Create test application
      run: |
        mkdir -p multimedia_app
        cd multimedia_app
        
        # Create main.py
        cat > main.py << 'EOF'
from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.label import Label
from kivy.uix.button import Button

class MultimediaControllerApp(App):
    def build(self):
        # Main layout
        main_layout = BoxLayout(orientation='vertical', padding=20, spacing=15)
        
        # Title
        title_label = Label(
            text='文旅多媒体演出控制系统\n移动端控制器',
            font_size='18sp',
            size_hint_y=0.25,
            halign='center'
        )
        title_label.bind(size=title_label.setter('text_size'))
        
        # Control buttons layout
        button_layout = BoxLayout(orientation='vertical', spacing=10, size_hint_y=0.5)
        
        # Test button
        test_btn = Button(text='系统测试', size_hint_y=0.5)
        test_btn.bind(on_press=self.on_test_press)
        
        # Status button
        status_btn = Button(text='状态检查', size_hint_y=0.5)
        status_btn.bind(on_press=self.on_status_press)
        
        button_layout.add_widget(test_btn)
        button_layout.add_widget(status_btn)
        
        # Status display
        self.status_label = Label(
            text='系统就绪\n等待操作指令',
            font_size='14sp',
            size_hint_y=0.25,
            halign='center'
        )
        self.status_label.bind(size=self.status_label.setter('text_size'))
        
        # Add all widgets to main layout
        main_layout.add_widget(title_label)
        main_layout.add_widget(button_layout)
        main_layout.add_widget(self.status_label)
        
        return main_layout
    
    def on_test_press(self, instance):
        self.status_label.text = '✅ 系统测试完成\nAPK构建成功\n移动端控制器正常运行'
    
    def on_status_press(self, instance):
        self.status_label.text = '📱 移动端状态：正常\n🔗 连接状态：就绪\n⚡ 系统版本：v1.0'

if __name__ == '__main__':
    MultimediaControllerApp().run()
EOF

        # Create buildozer.spec
        cat > buildozer.spec << 'EOF'
[app]
title = 文旅多媒体演出控制
package.name = multimediacontroller
package.domain = com.showcontrol.mobile
source.dir = .
source.include_exts = py
version = 1.0
requirements = python3,kivy
orientation = portrait
fullscreen = 0

[buildozer]
log_level = 2

# Android specific
android.permissions = INTERNET,ACCESS_NETWORK_STATE
android.api = 28
android.minapi = 21
android.sdk = 28
android.ndk = 21b
android.ndk_api = 21
android.accept_sdk_license = True
android.archs = armeabi-v7a
android.allow_backup = True
android.private_storage = True
EOF

        echo "✅ Application files created"
        ls -la
        
    - name: 🔨 Build APK
      working-directory: multimedia_app
      run: |
        echo "🚀 Starting APK build process..."
        
        # Set environment variables
        export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
        export PATH=$JAVA_HOME/bin:$PATH
        export ANDROID_HOME=$ANDROID_SDK_ROOT
        
        # Show environment info
        echo "📋 Environment Information:"
        echo "Java: $(java -version 2>&1 | head -1)"
        echo "Python: $(python --version)"
        echo "Buildozer: $(buildozer --version)"
        echo "Working directory: $(pwd)"
        
        # Clean previous builds
        rm -rf .buildozer bin
        
        # Build APK
        echo "🔨 Building APK..."
        buildozer android debug
        
    - name: 📋 List build results
      working-directory: multimedia_app
      run: |
        echo "📁 Build directory contents:"
        ls -la
        
        echo "📱 Looking for APK files:"
        find . -name "*.apk" -type f -exec ls -lh {} \;
        
        if [ -d "bin" ]; then
          echo "📦 Bin directory contents:"
          ls -la bin/
        else
          echo "⚠️ No bin directory found"
        fi
        
    - name: 📤 Upload APK
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: multimedia-controller-apk-${{ github.run_number }}
        path: |
          multimedia_app/bin/*.apk
          multimedia_app/.buildozer/android/platform/build-*/build/outputs/apk/**/*.apk
        retention-days: 30
        
    - name: 📊 Build Summary
      run: |
        echo "🎉 Build Process Completed!"
        echo "================================"
        
        APK_COUNT=$(find multimedia_app -name "*.apk" -type f | wc -l)
        
        if [ $APK_COUNT -gt 0 ]; then
          echo "✅ Success: $APK_COUNT APK file(s) generated"
          echo "📱 APK files:"
          find multimedia_app -name "*.apk" -type f -exec basename {} \;
          echo ""
          echo "📥 Download the APK from the 'Artifacts' section above"
          echo "📲 Install on Android device to test the app"
        else
          echo "❌ No APK files were generated"
          echo "📋 Check the build logs above for errors"
        fi
